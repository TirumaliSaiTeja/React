ReactJS

1. ReactJS is an open-source, component based front end library responsible only for the view layer of the
   application. It is maintained by Facebook.

2. ReactJS uses virtual DOM based mechanism to fill in data (views) in HTML DOM. The virtual DOM works fast owning
   to the fact that it only changes individual DOM elements instead of reloading complete DOM every time

3. A React application is made up of multiple components, each responsible for outputting a small,
   reusable piece of HTML. Components can be nested within other components to allow complex
   applications to be built out of simple building blocks.

4. React allows us to write components using a domain-specific language called JSX. JSX allows us to write our
   components using HTML, whilst mixing in JavaScript events. React will internally convert this into a virtual DOM, and it
   will ultimately output our HTML for us.

5. React "reacts" to state changes in your components quickly and automatically to rerender the components in the
   HTML DOM by utilizing the virtual DOM. The virtual DOM is an in-memory representation of an actual DOM. By
   doing most of the processing inside the virtual DOM rather than directly in the browser's DOM, React can act very
   quickly and only add, update, and remove components which have changed since the last render cycle occurred.

New ES6 syntax:

1. let

In the es5, we declare variable using var keyword, the scope of the variable
is global, if you declare it outside of a function or local means declaring it 
inside a function

Es6 provides a new way of declaring variable by using let keyword. The let 
keyword is similar to var keyword, except that the variable it declares 
are blocked-scope

Summary:
Variables are declaring using let keyword are:
block-scoped
not initialized to any value
not attached to the global object
redeclaring a variable using the let keyword will cause an error


2. Difference between var and let

The var variable belong to the global scope when we define them outside a function

example: var counter;

here the counter is a global variable, it means that the counter variable is 
accessible by any functions

in javascript a block is delimited by a pair of curly braces {}

The var variables
In the creation phase, the var variables are assigned storage spaces and immediately initialized to undefined.
In the execution phase, the var variables are assigned the values specified by the assignments if there are ones. If there arenâ€™t, the values of the variables remain undefined.
See the execution context for more information.

The let variables
In the creation phase, thelet variables are assigned storage spaces but are not initialized. Referencing uninitialized variables will cause a ReferenceError.
The let variables have the same execution phase as the var variables.
The temporal dead zone starts from the block until the let variable declaration is processed. In other words, it is where you cannot access the let variables before they are defined.

































